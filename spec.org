
* primitives
** PBKDF2 (RFC2898):
   - DK=PBKDF2(P,S,c,dkLen)  [PRF]
   - P: password (string)
   - S: salt (string)
   - c: iteration count (int)
   - dkLen: output length (int, bytes, <=hLen*(2^32-1))
   - DK: derived key (string, len=dkLen)
   - PRF: e.g. HMAC(SHA256), or AES+CBC
   - code:
     - each block is created independently
     - first iteration: U = PRF(P, S+uint64(blocknum)), key=U
     - subsequent iterations: U = PRF(S,U), key=XOR(key,U)
     - (i.e. build a c-long PRF chain, XOR all outputs together)
** scrypt (http://www.tarsnap.com/scrypt.html)
   - DK=out=scrypt(P,S,N,r,p,dkLen) [HMAC_SHA256, Salsa20/8]
   - P: password (string)
   - S: salt (string)
   - N: CPU/memory cost parameter
   - r: block size parameter, paper recommends r=8
   - p: parallelization parameter, paper recommends p=1
   - dkLen: output length (int, bytes, <=hLen*(2^32-1))
   - work:
     - code suggests "128*N*r <= memlimit", and "4*N*r*p < opslimit" for CPU
       time. The scrypt tool does a quick measurement of the local CPU to
       decide what values to use, influenced by input parameters. "opslimit"
       appears to be the number of salsa20/8 core invocations, and is
       constrained to be at least 2^15.
     - compiling with CFLAGS=-DDEBUG displays N/r/p values
     - on work laptop, memlimit=1M timelimit=10s gets N=1024,r=8,p=502
       - it measured 512 salsa20/8 cores taking 310us
       - note that tool requires "-M 100000", not "-M 1M"
       - default (no -M) allows use of 228MB, probably .125*sysmem
     - 10M gets N=8192,r=8,p=63
     - 100M gets N=65536, r=8, p=7
     - let's target 100M and my laptop's CPU, so N=65536, r=8, p=7
** HKDF
   - K1|K2|K3..|Kt = HKDF(XTS, SKM, CTXinfo, L)  [HMAC-SHA256]
   - XTS: Extractor Salt (string)
   - SKM: source key material (string)
   - CTXinfo: (string)
   - L: number of key bits (int)
   - SKM is secret. XTS is random but not-secret. resulting key is bound to
     CTXinfo.
   - code:
     - extract: PRK = HMAC(key=XTS, data=SKM)
     - expand: K1 = HMAC(key=PRK, data=CTXinfo+0)
       - K2 = HMAC(key=PRK, data=K1+CTXinfo+1), etc
** SRP (http://srp.stanford.edu/,
   http://en.wikipedia.org/wiki/Secure_remote_password_protocol)
   - system parameters (q, N, g, k)
   - algorithm choices: SHA-256
   - small random salt s
   - I username
   - p password
*** http://pypi.python.org/pypi/srp

* spec
** inputs:
   - password (bytestring)
   - email (unicode string)
** constants:
   - KW(s) = "identity.mozilla.com/keywrapping/v1/%s"%s
   - KWE(s,email) = ("identity.mozilla.com/keywrapping/v1/%s:"%s)+utf8(email)
** parameters
   - c1 = 10000 # PBKDF2 iteration count
   - c2 = 10000
   - N,r,p = 32768,8,1  # scrypt 100MB/1.0s, on work laptop
   - dkLen = 256/8 = 32 # bytes
   - algorithm choices: PBKDF uses HMAC-SHA256
** utilities:
   - perform_SRP(email, SRPpw_b64)
     - create session_id_b64 (random string)
     - do SRP, include session_id_b64, SRPsalt="", user=utf8(email)
     - return SRPKsession_b64, session_id_b64
   - encrypt_and_mac(ENC_b64, MAC_b64, data_b64):
     - IV = os.urandom(16)
     - A = AES256-CBC(key=ENC, IV, data)
     - B = HMAC-SHA256(key=MAC, data=concat(IV,A))
     - return b64(IV+A+B)
   - decrypt_and_mac(ENC_b64, MAC_b64, encdata_b64)
     - IV=encdata[:16], data = encdata[16:-32], macout = encdata[-32:]
     - check HMAC-SHA256(key=MAC, data=encdata[:-32]) == macout, else fail
     - return b64(AES256-CBC-decrypt(key=ENC, IV, data))
   - make_session_keys(key=SRPKsession_b64)
     - k = unb64(SRPKsession_b64)
     - keys=HKDF(SDK=k, XTS=KWE(session-keys,email), CTXinfo="", L=32+16+32+16)
     - split 'keys' into 32,16,32,16 bytes
     - ENC1_b64,MAC1_b64,ENC2_b64,MAC2_b64 = [b64(k) for split_keys]
     - SessionID_b64 = b64(SHA256(SRPKession))
   - send_request(msg_obj)  [client-side]
     - data_b64 = b64(json.dump(msg_obj).encode("utf-8"))
     - enc_data_b64 = encrypt_and_mac(ENC1_b64,MAC1_b64,data_b64)
     - enc_msg = ["encrypted-request", SessionID_b64, enc_data_b64]
     - send TX=json.dump(enc_msg).encode(utf8)
     - receive RX_b64
     - response_data_b64 = decrypt_and_mac(ENC2_b64,MAC2_b64,RX_b64)
     - return json.load(unb64(response_data_b64).decode(utf8))
   - receive_request(TX)  [server-side]
     - pieces = json.load(TX.decode(utf8))
     - if pieces[0] == "encrypted-request"
       - SessionID_b64 = pieces[1], enc_data_b64=pieces[2]
       - SRPKsession,email = sessions[SessionID_b64]
       - make_session_keys()
       - request_data_b64 = decrypt_and_mac(ENC1_b64,MAC1_b64,enc_data_b64)
       - request = json.load(unb64(request_data_b64).decode(utf8))
       - response=process_request(email, request)
       - response_data_b64 = b64(json.dump(response).encode(utf8))
       - return RX_b64 = encrypt_and_mac(ENC2_b64,MAC2_b64,response_b64)
** code:
   - KDF step:
     - A = PBKDF2(P=password, S=KWE("first-PBKDF",email), c=c1)
     - B = scrypt(P=A, S=KW("scrypt"), N,r,p)
       - or do offloaded-scrypt, to a different server than DB server
     - C = PBKDF2(P=password+B, S=KWE("second-PBKDF",email), c=c2)
     - PWK|MAC|SRPpw = HKDF(SKM=C, XTS=KW("HKDF"), CTXinfo="",L=3*dkLen)
   - create initial UK (done once, during account setup)
     - UK_b64 = b64(os.urandom(2*dkLen)) # 256 enc + 256 MAC
   - offloaded-scrypt
     - send_request(["do-scrypt", A_b64, N,r,p])
     - expect ["ok", B_b64]
   - SRP dance:
     - SRPsalt = ""
       - SRPpw is already salted by email, and SRPsalt must be shared with
         server, but SRPsalt must be computable by client before talking to
         server
     - username = utf8(email)
   - initial key-wrapping setup (done once, during browser setup):
     - compute PWK
     - decide whether server needs SRPv and WUK or not:
       - yes for account creation (first browser)
       - no for second and subsequent browsers
       - must ask server (get a boolean), MitM might lie
       - sending SRPv to MitM enables their attack
   - sending SRPv+WUK to server:
     - SRPv = SRP(P=SRPpw, username=utf8(email))
     - send (email, SRPv) safely to server
       - XXX: this is the vulnerable point. Needs at least pinned SSL.
       - verifiers[email] = SRPv
     - store initial WUK:
       - client:
         - WUK: WUKout_b64 = encrypt_and_mac(PWK, MAC, data=UK)
         - SRPKsession_b64,sessid = perform_SRP(email, SRPpw_b64)
           - server remembers sessid->(Ksession,email) for a little while
         - make_session_keys()
         - send_request(["set", WUKout_b64])
         - response should be ["ok"]
       - server process_request(email, request):
         - if request[0] == "set": db[email]=request[1], return ["ok"]
   - retrieve WUK (from password)
     - client:
       - compute PWK
       - perform SRP to get Ksession,sessid
         - server remembers sessid->(Ksession,email) for a little while
       - make_session_keys()
       - send_request(["get"])
       - response should be ["ok", WUKout_b64]
       - UK_b64 = decrypt_and_mac(PWK,MAC,WUKout_b64)
     - server process_request(email, request):
       - if request[0] == "read": return ["ok", db[email]]
   - change password
     - client:
       - compute PWKold, retrieve WUKold (doing first SRP dance)
       - unwrap to get UK
       - compute PWKnew
       - WUKnew_b64 = encrypt_and_mac(PWKnew, MACnew, data=UK)
       - do second SRP dance to get SRPKsession_b64,sessid
       - make_session_keys()
       - send_request(["change", SRPvnew_b64, WUKout_b64])
         - response should be ["ok"]
       - server process_request(email, request):
         - if request[0] == "change":
           - db[email]=WUKout_b64
           - verifiers[email]=SRPvnew_b64
           - return ["ok"]

** pending work
*** implement outsourced-scrypt server
*** need to decide about setup protection. TOFU/pinned-SSL/embedded-pubkey
*** consider whether the generic network-rpc function should always return
    JSON. Also, should errors be reported via HTTP codes or JSON blobs?
*** can we avoid stashing any early data on the server?
    - scrypt N/r/p values. two issues:
      - we don't want a rogue server to convince the client to use
        artificially low busywork, since that reduces the cost of attack once
        the client reveals a value derived through the work factor. So
        relying purely on a local value avoids that.
      - but all shared clients must use the same N/r/p. And it needs to be
        the lowest-common-denominator of the user's devices (i.e. if they're
        ever going to have a slow phone, it needs to be usable there).
    - SRP salt (use empty string, since SRPpw is already salted by email
      address)
    - should we have a separate repository, which holds non-password-derived
      values (indexed by email address)?
      - would protect against stored-data attackers, as long as we don't
        reveal things like last-accessed timestamps
      - wouldn't protect against live attackers. They would gain the
        advantage of limiting their search to one email address. I don't
        think that's a big advantage, in practice.
*** making server-side data anonymous
**** currently it is:
    - create an account-id in the HKDF step, next to the keys
    - use that as a server-side index
    - set SRPsalt="", since SRPpw is already salted by email address, and we
      can't safely fetch anything from the server before the KDF step
**** how much of an advantage would de-anonymization provide?
     - with anondata, if I want to find user=A's password, I must test user=A
       password=X for all X, then see if the resulting AccID is in the
       system. I must store all captured rows (AccID and WUK). For each test,
       I must do an O(logN) lookup on the data to find a match. For botnet
       systems, that means either serving the whole dataset to all bots, or
       having bots send back a constant stream of X+AccID pairs.
     - if I want to find any user that has a given password, I do the same
       thing but user=X and password=A. Same lookup requirements.
     - with nonanondata, the attacker must still test the same A/X
       combinations, but they only have to compare AccID against the
       known-user-A row, so lookup time is O(1). Minimal data must be sent to
       botnets.
     - actually, what the attacker will do is deliver a Bloom Filter of the
       S1 lookup values (1% error optimal takes 9.6 bits per element, so 100M
       users = 120MB, 0.1% error is 180MB). rats.
*** consider making PWK a single 256-bit key, then HKDF to get enc+mac keys
    - to make alternative PWK-management tools (pairing-based) easier; their
      output is a single key
*** why bother doing set-WUK inside SRP? it happens right after set-SRPv
    - instead of A=["init",email,SRPv], then SRP(WUK)
    - why not do B=["init", email, SRPv, WUK]?
    - probably doesn't provide much benefit, as long as both are in SSL
    - SRPv and WUK-MAC provide the same attack vector (SRPv includes some
      bignum math, WUK-MAC does not, but both include scrypt)
    - once the password is forced, a single online query can grab WUK
      - might be a race that favors the user: if we can detect that someone
        grabbed the SRPv, but for some reason they weren't able to grab the
        WUK at the same time, then they might be able to change their
        password before the attacker finishes the dictionary attack
      - if so, then B would retain that protective race against a lazy SSL
        MitM (who behaves like a passive eavesdropper, and doesn't do
        anything specific to our protocol)
      - but, that seems dubious. How would you detect an MitM during init?
* tools needed by client implementations
  - scrypt
  - PBKDF2 (with SHA256)
  - SRP (create-verifier, do-client-side)
  - AES/CBC/HMAC-SHA256
  - HKDF (or just SHA256)
