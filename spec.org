
* primitives
** PBKDF2 (RFC2898):
   - DK=PBKDF2(P,S,c,dkLen)  [PRF]
   - P: password (string)
   - S: salt (string)
   - c: iteration count (int)
   - dkLen: output length (int, bytes, <=hLen*(2^32-1))
   - DK: derived key (string, len=dkLen)
   - PRF: e.g. HMAC(SHA256), or AES+CBC
   - code:
     - each block is created independently
     - first iteration: U = PRF(P, S+uint64(blocknum)), key=U
     - subsequent iterations: U = PRF(S,U), key=XOR(key,U)
     - (i.e. build a c-long PRF chain, XOR all outputs together)
** scrypt (http://www.tarsnap.com/scrypt.html)
   - DK=out=scrypt(P,S,N,r,p,dkLen) [HMAC_SHA256, Salsa20/8]
   - P: password (string)
   - S: salt (string)
   - N: CPU/memory cost parameter
   - r: block size parameter, paper recommends r=8
   - p: parallelization parameter, paper recommends p=1
   - dkLen: output length (int, bytes, <=hLen*(2^32-1))
   - work:
     - code suggests "128*N*r <= memlimit", and "4*N*r*p < opslimit" for CPU
       time. The scrypt tool does a quick measurement of the local CPU to
       decide what values to use, influenced by input parameters. "opslimit"
       appears to be the number of salsa20/8 core invocations, and is
       constrained to be at least 2^15.
     - compiling with CFLAGS=-DDEBUG displays N/r/p values
     - on work laptop, memlimit=1M timelimit=10s gets N=1024,r=8,p=502
       - it measured 512 salsa20/8 cores taking 310us
       - note that tool requires "-M 100000", not "-M 1M"
       - default (no -M) allows use of 228MB, probably .125*sysmem
     - 10M gets N=8192,r=8,p=63
     - 100M gets N=65536, r=8, p=7
     - let's target 100M and my laptop's CPU, so N=65536, r=8, p=7
** HKDF
   - K1|K2|K3..|Kt = HKDF(XTS, SKM, CTXinfo, L)  [HMAC-SHA256]
   - XTS: Extractor Salt (string)
   - SKM: source key material (string)
   - CTXinfo: (string)
   - L: number of key bits (int)
   - SKM is secret. XTS is random but not-secret. resulting key is bound to
     CTXinfo.
   - code:
     - extract: PRK = HMAC(key=XTS, data=SKM)
     - expand: K1 = HMAC(key=PRK, data=CTXinfo+0)
       - K2 = HMAC(key=PRK, data=K1+CTXinfo+1), etc
** SRP (http://srp.stanford.edu/,
   http://en.wikipedia.org/wiki/Secure_remote_password_protocol)
   - system parameters (q, N, g, k)
   - algorithm choices: SHA-256
   - small random salt s
   - I username
   - p password
*** http://pypi.python.org/pypi/srp

* spec
** inputs:
   - password (string)
   - email (string)
** constants:
   - KW(s) = "identity.mozilla.com/keywrapping/v1/%s:"
** parameters
   - c1 = 10000 # PBKDF2 iteration count
   - c2 = 10000
   - N,r,p = 32768,8,1  # scrypt 100MB/1.0s, on work laptop
   - dkLen = 256/8 = 32 # bytes
   - algorithm choices: PBKDF uses HMAC-SHA256
** utilities:
   - perform_SRP(email, SRPpw_b64, SRPsalt_b64=None)
     - if not SRPsalt:
       - send TX=json.dump(["get-salt", email]).encode(utf8)
       - server receive_request(TX)
         - if pieces[0] == "get-salt"
           - return db_salt_b64[email]
       - receive SRPsalt_b64
     - do SRP
     - return SRPKsession_b64
   - encrypt_and_mac(ENC_b64, MAC_b64, data_b64):
     - IV = os.urandom(dkLen)
     - A = AES256-CBC(key=ENC, IV, data)
     - B = HMAC-SHA256(key=MAC, data=concat(IV,A))
     - return b64(IV+A+B)
   - decrypt_and_mac(ENC_b64, MAC_b64, encdata_b64)
     - IV=encdata[:32], data = encdata[32:-32], macout = encdata[-32:]
     - check HMAC-SHA256(key=MAC, data=encdata[:-32]) == macout, else fail
     - return b64(AES256-CBC-decrypt(key=ENC, IV, data))
   - make_session_keys(key=SRPKsession_b64)
     - k = unb64(SRPKsession_b64)
     - keys=HKDF(SDK=k, XTS=KW(session-keys), CTXinfo="", L=4*dkLen)
     - ENC1_b64,MAC1_b64,ENC2_b64,MAC2_b64 = [b64(k) for keys.split(32)]
     - SessionID_b64 = b64(SHA256(SRPKession))
   - send_request(msg_obj)  [client-side]
     - data_b64 = b64(json.dump(msg_obj).encode("utf-8"))
     - enc_data_b64 = encrypt_and_mac(ENC1_b64,MAC1_b64,data_b64)
     - enc_msg = ["encrypted-request", SessionID_b64, enc_data_b64]
     - send TX=json.dump(enc_msg).encode(utf8)
     - receive RX_b64
     - response_data_b64 = decrypt_and_mac(ENC2_b64,MAC2_b64,RX_b64)
     - return json.load(unb64(response_data_b64).decode(utf8))
   - receive_request(TX)  [server-side]
     - pieces = json.load(TX.decode(utf8))
     - if pieces[0] == "encrypted-request"
       - SessionID_b64 = pieces[1], enc_data_b64=pieces[2]
       - SRPKsession,email = sessions[SessionID_b64]
       - make_session_keys()
       - request_data_b64 = decrypt_and_mac(ENC1_b64,MAC1_b64,enc_data_b64)
       - request = json.load(unb64(request_data_b64).decode(utf8))
       - response=process_request(email, request)
       - response_data_b64 = b64(json.dump(response).encode(utf8))
       - return RX_b64 = encrypt_and_mac(ENC2_b64,MAC2_b64,response_b64)
** code:
   - compute PWK:
     - A = PBKDF(P=password, S=KW("first-PBKDF")+email, c=c1)
     - B = scrypt(P=A, S=KW("scrypt"), N,r,p)
     - C = PBKDF(P=password+B, S=KW("second-PBKDF")+email, c=c2)
     - PWK|MAC|SRPpw = HKDF(SKM=C, XTS=KW("three-keys"), CTXinfo="", L=3*dkLen)
   - create initial UK (done once, during account setup)
     - UK_b64 = b64(os.urandom(2*dkLen)) # 256 enc + 256 MAC
   - initial key-wrapping setup (done once, during account setup):
     - compute PWK
     - SRPv,SRPsalt = SRP(P=SRPpw, ...) // SRPsalt is short random
     - send (email, SRPv, SRPsalt) safely to server XXX
     - store initial WUK:
       - client:
         - WUK: WUKout_b64 = encrypt_and_mac(PWK, MAC, data=UK)
         - SRPKsession_b64 = perform_SRP(email, SRPpw_b64, SRPsalt_b64)
           - server remembers H(Ksession)->(Ksession,email) for a little while
         - make_session_keys()
         - send_request(["set", WUKout_b64])
         - response should be ["ok"]
       - server process_request(email, request):
         - if request[0] == "set": db[email]=request[1], return ["ok"]
   - retrieve WUK (from password)
     - client:
       - send email, retrieve SRPsalt
       - compute PWK (while waiting for SRPsalt)
       - perform SRP to get Ksession
         - server remembers H(Ksession)->(Ksession,email) for a little while
       - make_session_keys()
       - send_request(["get"])
       - response should be ["ok", WUKout_b64]
       - UK_b64 = decrypt_and_mac(PWK,MAC,WUKout_b64)
     - server process_request(email, request):
       - if request[0] == "read": return ["ok", db[email]]
** pending changes
   - use a random nonce as a sessionid, instead of H(KSession). SRP involves
     two roundtrips, and we need a sessionid to connect them together, so
     H(Ksession) comes too late.
   - consider whether the generic network-rpc function should always return
     JSON. Also, should errors be reported via HTTP codes or JSON blobs?
